@page "/manager/files"
@using KAWebHost.Data.Models
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@using System.Collections;
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment HostEnvironment
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Radzen
@using System.Web

<AuthorizeView>
    <Authorized>
        <div class="d-flex flex-column-fluid ">
            <div class="container-fluid">
                <div class="card-header ">
                    <h3 class="card-title">Quản lý files</h3>
                </div>
                <div class="card-body" style="background-color: #fff">
                    @if (context.User.IsInRole(ADMINISTRATION_ROLE))
                    {
                        <div class="row">
                            <div class="col-md-3" style="margin-bottom: 16px">
                                <div class="d-flex">
                                    <RadzenUpload ChooseText="Upload Files" Multiple="true"
                                              Accept="image/*"
                                              Url=@($"/api/upload/multiple?CurrentDirectory={HttpUtility.UrlEncode(CurrentDirectory.ToLower().Replace(CurrentRoot.ToLower(), ""))}")
                                              Style="margin-bottom: 20px;height: 45px"
                                              Progress="@((args) => OnProgress(args))" />
                                </div>
                                <RadzenTree Change="@LogChange" Data="@Directories"
                                        Expand="@LoadDirectory"
                                        Style="width: 100%; height: 300px">
                                    <RadzenTreeLevel Text="@GetTextForNode"
                                                 Template="@FileOrFolderTemplate" />
                                </RadzenTree>
                            </div>
                            <div class="col-md-9" style="margin-bottom: 16px">
                                <RadzenDataList WrapItems="true" AllowPaging="true"
                                            Data="@Files" TItem="FileObject">
                                    <Template Context="file">
                                        @if (file.FileName == SelectedFile.FileName)
                                        {
                                            <RadzenImage Path="@file.FilePath"
                                                 Style="width:100px;
                                        padding:10px;
                                        background-color:darkgrey"
                                                 Click="@((args) => SelectImage(file))" />
                                        }
                                        else
                                        {
                                            <RadzenImage Path="@file.FilePath"
                                                 Style="width: 100px;
                                        padding: 10px;
                                        background-color: white"
                                                 Click="@((args) => SelectImage(file))" />
                                        }
                                    </Template>
                                </RadzenDataList>
                            </div>
                        </div>
                    }
                    else
                    {
                        <p>Bạn không có quyền quản lý file</p>
                    }
                </div>
            </div>
        </div>

    </Authorized>
    <NotAuthorized>
        <p>Bạn chưa đăng nhập</p>
    </NotAuthorized>
</AuthorizeView>

@if (ShowPopup)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Upload Status</h4>
                </div>
                <div align="center">
                    <RadzenProgressBar Value="@progress"
                                   Unit="@info"
                                   Visible="@(progress > 0)"
                                   Style="margin-bottom: 20px" />
                </div>
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string ADMINISTRATION_ROLE = "Administrators";
    bool ShowPopup = false;
    bool ShowFolderPopup = false;
    int progress;
    string info;
    string CurrentDirectory = "";
    string CurrentRoot = "";
    string NewFolderName = "";
    FileObject SelectedFile = new FileObject();
    List<string> Directories = new List<string>();
    List<FileObject> Files = new List<FileObject>();
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    protected override void OnInitialized()
    {
        CurrentRoot = HostEnvironment.WebRootPath;
        CurrentDirectory = Path.Combine(CurrentRoot, "uploads");
        Directories.Add(CurrentDirectory);
        LoadFiles();
    }
    // Files
    void SelectImage(FileObject file)
    {
        if (SelectedFile.FileName == file.FileName)
        {
            SelectedFile = new FileObject();
        }
        else
        {
            SelectedFile = file;
        }
    }

    void LogChange(TreeEventArgs args)
    {
        CurrentDirectory = args.Value as string;
        LoadFiles();
    }

    string GetTextForNode(object data)
    {
        return Path.GetFileName((string)data);
    }

    RenderFragment<RadzenTreeItem> FileOrFolderTemplate = (context) => builder =>
    {
        string path = context.Value as string;
        bool isDirectory = Directory.Exists(path);
        builder.OpenComponent<RadzenIcon>(0);
        builder.AddAttribute(1,
            "Icon", isDirectory ? "folder" :
            "insert_drive_file");
        if (!isDirectory)
        {
            builder.AddAttribute(2,
                "Style",
                "margin-left: 24px");
        }
        builder.CloseComponent();
        builder.AddContent(3, context.Text);
    };

    void LoadDirectory(TreeExpandEventArgs args)
    {
        CurrentDirectory = args.Value as string;
        // Only get the folders not the files
        args.Children.Data =
            Directory.EnumerateFileSystemEntries(CurrentDirectory)
            .Where(x => !x.Contains("."));
        args.Children.Text = GetTextForNode;
        args.Children.HasChildren = (path) => Directory.Exists((string)path);
        args.Children.Template = FileOrFolderTemplate;
    }

    void LoadFiles()
    {
        Files = new List<FileObject>();
        var FileNames =
            Directory.EnumerateFileSystemEntries(CurrentDirectory)
            .Where(x => x.Contains("."));
        foreach (var item in FileNames)
        {
            Files.Add(new FileObject()
                {
                    FileName =
                                Path.GetFileName(item),
                    FilePath =
                                item.Replace(HostEnvironment.WebRootPath, "")
                });
        }
        // Reset selected file
        SelectedFile = new FileObject();
        // Update UI
        StateHasChanged();
    }

    async void OnProgress(UploadProgressArgs args)
    {
        ShowPopup = true;
        this.info = $"{args.Loaded} of {args.Total} bytes.";
        this.progress = args.Progress;
        StateHasChanged();
        if (args.Loaded == args.Total)
        {
            // Delay to give files time to be saved
            // before reloading file view
            await LoadFilesAsync();
        }
    }
    public async Task LoadFilesAsync()
    {
        int Time = 1;
        while (Time > 0)
        {
            Time--;
            StateHasChanged();
            await Task.Delay(1000);
        }
        ShowPopup = false;
        LoadFiles();
    }
}
